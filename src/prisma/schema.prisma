// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin", "linux-musl", "debian-openssl-3.0.x"]
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String      @id @default(uuid())
  startDate   DateTime
  endDate     DateTime
  brand       String
  name        String
  password    String
  description String?
  status      EventStatus @default(CREATED)
  lootBoxes   LootBox[]
}

enum EventStatus {
  CREATED
  ACTIVE
  CANCELLED
}

model User {
  id               String    @id @default(uuid())
  email            String?
  walletAddress    String    @unique
  claimedLootBoxes LootBox[]
  orders           Order[]
}

model LootBox {
  id          String    @id @default(uuid())
  dateOpened  DateTime?
  lootId      String?
  loot        Loot?     @relation(fields: [lootId], references: [id])
  claimedById String?
  claimedBy   User?     @relation(fields: [claimedById], references: [id])
  lootNftId   String?   @unique
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  locationId  String?   @unique
  location    Location? @relation(fields: [locationId], references: [id])
}

model Loot {
  id                String    @id @default(uuid())
  name              String
  imageUrl          String
  totalSupply       Int
  circulatingSupply Int       @default(0)
  lootBoxes         LootBox[]
  orders            Order[]
}

model Location {
  id           String   @id @default(uuid())
  address      String?
  positionName String?
  latitude     Float
  longitude    Float
  lootBox      LootBox?
}

model Order {
  id              Int              @id @default(autoincrement())
  status          OrderStatus      @default(PENDING)
  transactionHash String           @unique
  firstName       String
  lastName        String
  lootId          String
  loot            Loot             @relation(fields: [lootId], references: [id])
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  deliveryAddress DeliveryAddress?
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
}

model DeliveryAddress {
  id      String @id @default(uuid())
  street  String
  city    String
  zipCode String
  country String
  orderId Int    @unique
  order   Order  @relation(fields: [orderId], references: [id])
}

// ScanEvent should register the lootbox, event, date and user.
